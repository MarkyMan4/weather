{"version":3,"sources":["api/weatherRequests.js","App.js","reportWebVitals.js","index.js"],"names":["info","convertToFahrenheit","tempKelvin","Math","round","getCurrentWeather","zip","a","axios","get","params","appid","then","res","parseFloat","data","main","temp","tempFahrenheit","realFeelKelvin","feels_like","realFeelFahrenheit","windSpeedMph","wind","speed","cloudCover","clouds","all","humidity","city","name","catch","err","error","App","useState","setZip","isValidZip","setIsValidZip","setTemp","realFeel","setRealFeel","windSpeed","setWindSpeed","setCloudCover","setHumidity","setCity","className","type","placeholder","onChange","event","target","value","onKeyPress","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAEMA,EACG,mCADHA,EAEO,kDAGPC,EAAsB,SAACC,GACzB,OAAOC,KAAKC,MAAM,KAACF,EAAa,QAAoB,KAG3CG,EAAiB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACtBC,IAAMC,IACTT,EACA,CACEU,OAAQ,CACNJ,IAAKA,EACLK,MAAOX,KAGXY,MAAK,SAAAC,GAEL,IAAIX,EAAaY,WAAWD,EAAIE,KAAKC,KAAKC,MACtCC,EAAiBjB,EAAoBC,GAErCiB,EAAiBL,WAAWD,EAAIE,KAAKC,KAAKI,YAM9C,MAAO,CACLF,eAAgBA,EAChBG,mBAPuBpB,EAAoBkB,GAQ3CG,aALiBnB,KAAKC,MAAwC,MAAlCU,WAAWD,EAAIE,KAAKQ,KAAKC,QAMrDC,WAAYZ,EAAIE,KAAKW,OAAOC,IAC5BC,SAAUf,EAAIE,KAAKC,KAAKY,SACxBC,KAAMhB,EAAIE,KAAKe,SAEhBC,OAAM,SAAAC,GACP,MAAO,CACLC,MAAO,8BA9BgB,2CAAH,sD,OCiEfC,MAvEf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACN7B,EADM,KACD8B,EADC,OAEuBD,oBAAS,GAFhC,mBAENE,EAFM,KAEMC,EAFN,OAGWH,mBAAS,IAHpB,mBAGNlB,EAHM,KAGAsB,EAHA,OAImBJ,mBAAS,IAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKqBN,mBAAS,IAL9B,mBAKNO,EALM,KAKKC,EALL,OAMuBR,mBAAS,IANhC,mBAMNV,EANM,KAMMmB,EANN,OAOmBT,mBAAS,IAP5B,mBAONP,EAPM,KAOIiB,EAPJ,OAQWV,mBAAS,IARpB,mBAQNN,EARM,KAQAiB,EARA,KAoDb,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,OAAd,SAAqB,wDACrB,uBACA,uBACEC,KAAK,SACLC,YAAY,cACZC,SAAU,SAAAC,GAAK,OAAIf,EAAOe,EAAMC,OAAOC,QACvCA,MAAO/C,EACPgD,WAnDS,SAACH,GACG,UAAdA,EAAMI,KACPlD,EAAkBC,GAAKM,MAAK,SAAAC,GACvBA,EAAIoB,MACLK,GAAc,IAGdA,GAAc,GACdC,EAAQ1B,EAAIK,gBACZuB,EAAY5B,EAAIQ,oBAChBsB,EAAa9B,EAAIS,cACjBsB,EAAc/B,EAAIY,YAClBoB,EAAYhC,EAAIe,UAChBkB,EAAQjC,EAAIgB,WAuCdkB,UAAU,iCAEZ,mBAAGA,UAAU,OAAb,mCACA,uBAnCCV,EAEC,gCACE,6BAAI,4BAAG,4BAAIR,QACX,oBAAIkB,UAAU,OAAd,SAAqB,qDACrB,6BAAK9B,EAAO,aACZ,oBAAI8B,UAAU,OAAd,SAAqB,6CACrB,6BAAKP,EAAW,aAChB,oBAAIO,UAAU,OAAd,SAAqB,6CACrB,6BAAKL,EAAY,SACjB,oBAAIK,UAAU,OAAd,SAAqB,8CACrB,6BAAKtB,EAAa,MAClB,oBAAIsB,UAAU,OAAd,SAAqB,2CACrB,6BAAKnB,EAAW,SAKb,6BAAI,6DCzCF4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8642640d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst info = {\n    key: 'c6cf35300cb54c4ef7da1c2fa07c88bc',\n    baseUrl: 'https://api.openweathermap.org/data/2.5/weather'\n  }\n\nconst convertToFahrenheit = (tempKelvin) => {\n    return Math.round((tempKelvin - 273.15) * (9 / 5) + 32);\n}\n\nexport const getCurrentWeather = async (zip) => {\n    return axios.get(\n        info.baseUrl,\n        {\n          params: {\n            zip: zip,\n            appid: info.key\n          }\n        }\n      ).then(res => {\n        // temp is given in Kelvin, so convert to Fahrenheit\n        let tempKelvin = parseFloat(res.data.main.temp);\n        let tempFahrenheit = convertToFahrenheit(tempKelvin);\n\n        let realFeelKelvin = parseFloat(res.data.main.feels_like);\n        let realFeelFahrenheit = convertToFahrenheit(realFeelKelvin);\n\n        // wind speed is given in meters per second, so convert to mph\n        let windSpeedMph = Math.round(parseFloat(res.data.wind.speed) * 2.237);\n\n        return {\n          tempFahrenheit: tempFahrenheit,\n          realFeelFahrenheit: realFeelFahrenheit,\n          windSpeedMph: windSpeedMph,\n          cloudCover: res.data.clouds.all,\n          humidity: res.data.main.humidity,\n          city: res.data.name\n        };\n      }).catch(err => {\n        return {\n          error: 'Enter a valid zip code'\n        };\n      });\n}\n","import { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { getCurrentWeather } from './api/weatherRequests';\n\nfunction App() {\n  const [zip, setZip] = useState('');\n  const [isValidZip, setIsValidZip] = useState(false);\n  const [temp, setTemp] = useState('');\n  const [realFeel, setRealFeel] = useState('');\n  const [windSpeed, setWindSpeed] = useState('');\n  const [cloudCover, setCloudCover] = useState('');\n  const [humidity, setHumidity] = useState('');\n  const [city, setCity] = useState('');\n\n  const search = (event) => {\n    if(event.key === 'Enter') {\n      getCurrentWeather(zip).then(res => {\n        if(res.error) {\n          setIsValidZip(false);\n        }\n        else {\n          setIsValidZip(true);\n          setTemp(res.tempFahrenheit);\n          setRealFeel(res.realFeelFahrenheit);\n          setWindSpeed(res.windSpeedMph);\n          setCloudCover(res.cloudCover);\n          setHumidity(res.humidity);\n          setCity(res.city);\n        }\n      });\n    }\n  }\n\n  const getDisplayInfo = () => {\n    if(isValidZip) {\n      return (\n        <div>\n          <h2><b><u>{city}</u></b></h2>\n          <h3 className=\"mt-4\"><b>Actual Temperature</b></h3>\n          <h4>{temp + ' ॰F'}</h4>\n          <h3 className=\"mt-4\"><b>Feels Like</b></h3>\n          <h4>{realFeel + ' ॰F'}</h4>\n          <h3 className=\"mt-4\"><b>Wind Speed</b></h3>\n          <h4>{windSpeed + ' mph'}</h4>\n          <h3 className=\"mt-4\"><b>Cloud Cover</b></h3>\n          <h4>{cloudCover + '%'}</h4>\n          <h3 className=\"mt-4\"><b>Humidity</b></h3>\n          <h4>{humidity + '%'}</h4>\n        </div>\n      );\n    }\n    else {\n      return <h3><b>Enter a valid zip code</b></h3>;\n    }\n  }\n\n  return (\n    <div className=\"app pt-5 text-center\">\n      <h1 className=\"mb-0\"><b>⛅ Weather ⚡</b></h1>\n      <br />\n      <input \n        type=\"number\"\n        placeholder=\"Zip code...\"\n        onChange={event => setZip(event.target.value)} \n        value={zip}\n        onKeyPress={search}\n        className=\"form-control ml-auto mr-auto\"\n      />\n      <p className=\"pt-2\">Press enter to search</p>\n      <hr />\n      {getDisplayInfo()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}